import tkinter as tk
from tkinter import ttk
import pandas as pd

class JournalEntryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Accounting Journal Entry Recorder")
        self.df = pd.DataFrame(columns=["Account Title", "Debit", "Credit"])
        self.create_widgets()


   
    def load_data_from_file(self):
        file_path = self.file_path_var.get()
        try:
            # Load the data from the file into a DataFrame
            loaded_df = pd.read_excel(file_path)  # Assuming you want to load Excel files
            # Append the loaded data to the existing DataFrame
            self.df = pd.concat([self.df, loaded_df], ignore_index=True)
            self.update_treeview()
            self.file_path_var.set("")  # Clear the entry field after loading
        except Exception as e:
            # Handle any potential errors while loading the file
            tk.messagebox.showerror("Error", f"Error loading file: {str(e)}")


    def create_widgets(self):
        # Main frame
        main_frame = tk.Frame(self.root)
        main_frame.pack(side="left", fill="both", expand=True)

        tk.Label(main_frame, text="Manual Journal Entries").pack()

        # Account Title and Value entries
        tk.Label(main_frame, text="Account Title").pack()
        self.account_title_var = tk.StringVar()
        tk.Entry(main_frame, textvariable=self.account_title_var).pack()

        tk.Label(main_frame, text="Value").pack()
        self.value_var = tk.StringVar()
        tk.Entry(main_frame, textvariable=self.value_var).pack()

        # Buttons frame with grid layout
        buttons_frame = tk.Frame(main_frame)
        buttons_frame.pack()

        ttk.Button(buttons_frame, text="Debit", command=lambda: self.add_entry("Debit")).grid(row=0, column=0)
        ttk.Button(buttons_frame, text="Credit", command=lambda: self.add_entry("Credit")).grid(row=0, column=1)
        ttk.Button(buttons_frame, text="Clear", command=self.clear_entries).grid(row=1, column=0)
        ttk.Button(buttons_frame, text="Save as Excel", command=self.save_as_excel).grid(row=1, column=1, columnspan=3)


        # Automated Frame
        automated_frame = tk.Frame(main_frame)
        automated_frame.pack()

        # widgets for automated journal entries
        tk.Label(automated_frame, text="Automated Journal Entries").pack()
        tk.Label(automated_frame, text="File name or path").pack()
        self.file_path_var = tk.StringVar()

        button_grid_frame = tk.Frame(automated_frame)
        button_grid_frame.pack()
    
        tk.Entry(automated_frame, textvariable=self.file_path_var).pack()
        ttk.Button(button_grid_frame, text="Load File", command=self.load_data_from_file).grid(row=1, column=0)
        ttk.Button(button_grid_frame, text="Clear", command=self.clear_entries).grid(row=1, column=1)


        # Treeview for displaying DataFrame
        ttk.Label(self.root, text="Journal Entries Overview").pack()
        self.tree = ttk.Treeview(self.root, columns=list(self.df.columns), show='headings')
        for col in self.df.columns:
            self.tree.heading(col, text=col)
        self.tree.pack(fill="both", expand=True)
        self.tree.bind("<Delete>", self.delete_entry)

    def add_entry(self, debit_credit):
        new_entry = {
            "Account Title": self.account_title_var.get(),
            "Debit": self.value_var.get() if debit_credit == "Debit" else "",
            "Credit": self.value_var.get() if debit_credit == "Credit" else ""
        }
        self.df = pd.concat([self.df, pd.DataFrame([new_entry])], ignore_index=True)
        self.update_treeview()

    def delete_entry(self, event=None):
        selected_items = self.tree.selection()
        for item in selected_items:
            self.tree.delete(item)
            self.df.drop(self.df.index[self.df.index == int(item)], inplace=True)

    def update_treeview(self):
        self.tree.delete(*self.tree.get_children())
        for i, row in self.df.iterrows():
            self.tree.insert("", "end", iid=i, values=list(row))

    def clear_entries(self):
        self.account_title_var.set("")
        self.value_var.set("")

    def save_as_excel(self):
        self.df.to_excel("journal_entries.xlsx", index=False)


def main():
    root = tk.Tk()
    app = JournalEntryApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
